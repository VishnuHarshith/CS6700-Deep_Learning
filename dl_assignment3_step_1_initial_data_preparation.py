# -*- coding: utf-8 -*-
"""DL_Assignment3_Step 1 - Initial Data Preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GpDlBgLKni9Vi-EKOKFv5DUuQ7fvs4O-
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2
import pandas as pd
from matplotlib import pyplot as plt
import os
import numpy as np
from sklearn.model_selection import train_test_split
# %matplotlib inline
import tarfile
import zipfile

from google.colab import drive
drive.mount('/content/gdrive')

# with zipfile.ZipFile('/content/gdrive/My Drive/Dataset_Final_Class_21.zip', 'r') as zip_ref:
#     zip_ref.extractall('/content/gdrive/My Drive/Images_Round2_Class21')

my_tar = tarfile.open('/content/gdrive/My Drive/Copy of CUB_200_2011.tgz')
my_tar.extractall('/content/gdrive/My Drive/DL_Assignment_3') # specify which folder to extract to
my_tar.close()

# data_path = '/content/gdrive/My Drive/Images_Round2_Class21/'
# # we'll use data from two folders
shelf_images = '/content/gdrive/My Drive/DL_Assignment_3/CUB_200_2011/images/'
# product_images = '/content/gdrive/My Drive/Images_Round2_Class21/Dataset_Final_Class_21/p'

images = pd.read_csv('/content/gdrive/My Drive/DL_Assignment_3/CUB_200_2011/images.txt', sep=" ", header=None)
images.columns = ["image_id", "file"]

images["label"] = images.file.apply(
            lambda x: int(x[:3])
        )

images.head()

# # let's get all shelves photo data from ShelfImages
# # jpg_files = [f for f in os.listdir(f'{shelf_images}') if f.endswith('jpg')]
# images = pd.DataFrame([[f, 20] for f in jpg_files], 
#                          columns=['file', 'class'])
# photos_df.head()

data = pd.read_csv('/content/gdrive/My Drive/DL_Assignment_3/CUB_200_2011/bounding_boxes.txt', sep=" ", header=None)
data.columns = ["image_id", "x", "y", "w", "h"]

bounding_box = data[1056:1115]

data.head()

df = pd.merge(images, data)

df.head()

df['xmax'] = df['x'] + df['w']
df['ymax'] = df['y'] + df['h']
df.head()

df.rename(columns = {'x':'xmin'}, inplace = True)
df.rename(columns = {'y':'ymin'}, inplace = True)

df.head()

# # let's get products on shelves photo from ProductImagesFromShelves
# products_df = pd.DataFrame(
#     [[f[:9], i, *map(int, f[10:-5].split('_'))] 
#      for i in range(21) 
#      for f in os.listdir(f'{product_images}{i}') if f.endswith('jpeg')],
#     columns=['file',
#              'category','sku_id', 'xmin', 'ymin', 'w', 'h'])
# # convert from width height to xmax, ymax
# products_df['xmax'] = products_df['xmin'] + products_df['w']
# products_df['ymax'] = products_df['ymin'] + products_df['h']
# products_df.head()

"""<h1>Train/Validation/Test Split</h1>"""

shelves = list(set(photos_df['sku_id'].values))
type(shelves[0])

# get distinct shelves
shelves = list(set(photos_df['sku_id'].values))
# use train_test_split from sklearn
shelves_train, shelves_validation, _, _ = train_test_split(
    shelves, shelves, test_size=0.3, random_state=6)
# mark all records in data frames with is_train flag
def is_train(sku_id): return sku_id in shelves_train
photos_df['is_train'] = photos_df.sku_id.apply(is_train)
products_df['is_train'] = products_df.sku_id.apply(is_train)

df = products_df.\
         groupby(['category', 'is_train'])['category'].\
         count().unstack('is_train').fillna(0)
df.plot(kind='barh', stacked=True)

# save to pkl
photos_df.to_pickle(f'{data_path}photos.pkl')
products_df.to_pickle(f'{data_path}products.pkl')

/content/gdrive/My Drive/DL_Assignment_3/CUB_200_2011/images/020.Yellow_breasted_Chat/Yellow_Breasted_Chat_0048_21797.jpg

# function to display shelf photo with rectangled products
def draw_shelf_photo(file):
    file_products_df = df[df.file == file]
    coordinates = file_products_df[['xmin', 'ymin', 'xmax', 'ymax']].values
    im = cv2.imread(f'{shelf_images}{file}')
    im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)
    print(type(coordinates))
    for xmin, ymin, xmax, ymax in coordinates:
      cv2.rectangle(im, (int(xmin), int(ymin)), (int(xmax), int(ymax)), (0, 255, 0), 5)
    plt.imshow(im)

# draw one photo to check our data
fig = plt.gcf()
draw_shelf_photo('131.Vesper_Sparrow/Vesper_Sparrow_0095_125459.jpg')

final_df = df[df.label == 20]
df_41 = df[df.label == 41]
df_95 = df[df.label == 95]
df_114 = df[df.label == 114]
df_128 = df[df.label == 128]
df_131 = df[df.label == 131]
df_135 = df[df.label == 135]

final_df = final_df.append(df_135)

final_df['xmax'] = final_df['xmax'].astype(int)
final_df['xmin'] = final_df['xmin'].astype(int)
final_df['ymax'] = final_df['ymax'].astype(int)
final_df['ymin'] = final_df['ymin'].astype(int)
final_df['w'] = final_df['w'].astype(int)
final_df['h'] = final_df['h'].astype(int)

final_df.shape

final_df.to_csv('/content/gdrive/My Drive/DL_Assignment_3/image_data_team43.csv', index = False)

final_df.head()

# get distinct shelves
shelves = list(set(final_df['image_id'].values))
# use train_test_split from sklearn
shelves_train, shelves_validation, _, _ = train_test_split(
    shelves, shelves, test_size=0.3, random_state=6)
# mark all records in data frames with is_train flag
def is_train(image_id): return image_id in shelves_train
final_df['is_train'] = final_df.image_id.apply(is_train)
# products_df['is_train'] = products_df.shelf_id.apply(is_train)

df_plot = final_df.\
         groupby(['label', 'is_train'])['label'].\
         count().unstack('is_train').fillna(0)
df_plot.plot(kind='barh', stacked=True)

final_df.head()

val_data = final_df[final_df.is_train == False]

# get distinct shelves
shelves = list(set(val_data['image_id'].values))
# use train_test_split from sklearn
shelves_train, shelves_validation, _, _ = train_test_split(
    shelves, shelves, test_size=0.33, random_state=6)
# mark all records in data frames with is_train flag
def is_val(image_id): return image_id in shelves_train
val_data['is_val'] = val_data.image_id.apply(is_val)
# products_df['is_train'] = products_df.shelf_id.apply(is_train)

val_data.shape

df_plot = val_data.\
         groupby(['label', 'is_val'])['label'].\
         count().unstack('is_val').fillna(0)
df_plot.plot(kind='barh', stacked=True)

test_data = val_data[val_data.is_val == False]

test_data.shape

validation_data = val_data[val_data.is_val == True]

validation_data.shape

train_data = final_df[final_df.is_train == True]

train_data.shape

train_data.to_csv('/content/gdrive/My Drive/DL_Assignment_3/train_data_team43.csv', index = False)
test_data.to_csv('/content/gdrive/My Drive/DL_Assignment_3/test_data_team43.csv', index = False)
validation_data.to_csv('/content/gdrive/My Drive/DL_Assignment_3/val_data_team43.csv', index = False)

final_df.shape